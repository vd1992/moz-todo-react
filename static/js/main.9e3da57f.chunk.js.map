{"version":3,"sources":["components/Todo.js","components/Form.js","components/FilterButton.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","useState","isEditing","setEditing","newName","setNewName","editingTemplate","className","onSubmit","e","preventDefault","editTask","id","htmlFor","name","type","value","onChange","target","onClick","viewTemplate","defaultChecked","completed","toggleTaskCompleted","deleteTask","Form","setName","addTask","autoComplete","FilterButton","aria-pressed","isPressed","setFilter","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","tasks","setTasks","filter","remainingTasks","updatedTasks","map","editedTaskList","taskList","filterList","newTask","nanoid","length","role","aria-labelledby","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9e3da57f.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\n//props passed include toggle+edit+delete functions, and content to fill\r\nexport default function Todo(props) {\r\n    //intialize state hooks for which template to use via conditional rendering as well as a hook for editing \r\n    const [isEditing, setEditing] = useState(false);\r\n    const [newName, setNewName] = useState('');\r\n\r\n    //when called by event listener in the edit template, adjust state of newName\r\n    function handleChange(e) {\r\n        setNewName(e.target.value);\r\n    }\r\n\r\n    //when form submission happens in the edit template, call this\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        //call props edit function, pass in state of newName and id of what was editted, then wipe state and hide edit template\r\n        props.editTask(props.id, newName);\r\n        setNewName(\"\");\r\n        setEditing(false);\r\n    }\r\n\r\n    //conditional rendering, edit template for editting a task\r\n    //calls submit function on submit, change in input field calls function via event listener\r\n    //cancel button switches view template, save triggers form submission, props.name is passed in from parent\r\n    const editingTemplate = (\r\n        <form className=\"stack-small\" onSubmit={handleSubmit}> \r\n          <div className=\"form-group\">\r\n            <label className=\"todo-label\" htmlFor={props.id}>\r\n              New name for {props.name}\r\n            </label>\r\n            <input \r\n                id={props.id} \r\n                className=\"todo-text\" \r\n                type=\"text\" \r\n                value={newName}\r\n                onChange={handleChange}\r\n            /> \r\n          </div>\r\n          <div className=\"btn-group\">\r\n            <button\r\n                type=\"button\"\r\n                className=\"btn todo-cancel\"\r\n                onClick={() => setEditing(false)}\r\n            >\r\n                Cancel\r\n                <span className=\"visually-hidden\">renaming {props.name}</span>\r\n            </button>\r\n            <button type=\"submit\" className=\"btn btn__primary todo-edit\">\r\n              Save\r\n              <span className=\"visually-hidden\">new name for {props.name}</span>\r\n            </button>\r\n          </div>\r\n        </form>\r\n      );\r\n\r\n      //conditional rendering, view template for viewing a task\r\n      //has props function for delete and toggle included to call, as well as edit function, editting view controlled by state in this component\r\n      //toggle triggered by checkbox change\r\n      //edit button triggers state change and therefore view change in conditional rendering\r\n      //delete triggers delete prop that passes in id as callback to parent which then deletes and re-renders\r\n      const viewTemplate = (\r\n        <div className=\"stack-small\">\r\n          <div className=\"c-cb\">\r\n              <input\r\n                id={props.id}\r\n                type=\"checkbox\"\r\n                defaultChecked={props.completed}\r\n                onChange={() => props.toggleTaskCompleted(props.id)}\r\n              />\r\n              <label className=\"todo-label\" htmlFor={props.id}>\r\n                {props.name}\r\n              </label>\r\n            </div>\r\n            <div className=\"btn-group\">\r\n             <button \r\n                type=\"button\" \r\n                className=\"btn\" \r\n                onClick={() => setEditing(true)}\r\n             >\r\n              Edit <span className=\"visually-hidden\">{props.name}</span>\r\n             </button>\r\n             <button\r\n                type=\"button\"\r\n                className=\"btn btn__danger\"\r\n                onClick={() => props.deleteTask(props.id)}\r\n             >\r\n                Delete <span className=\"visually-hidden\">{props.name}</span>\r\n             </button>\r\n            </div>\r\n        </div>\r\n      );\r\n\r\n    //display what is needed, whichever template is active\r\n    //conditional rendering dependent on state of isEditing which then runs a ternary to render either of the two CONST above\r\n    return (\r\n        <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>\r\n    ); \r\n} \r\n\r\n","import React, { useState } from \"react\";\r\n\r\n//render form, props passed in include addTask function\r\nfunction Form(props) {\r\n  //to handle input into form, state hook initialized and set to empty string\r\n  const [name, setName] = useState('');  \r\n\r\n  //as form gets content typed into it, onchange calls this function to adjust state\r\n  function handleChange(e) {\r\n    setName(e.target.value);\r\n  } \r\n\r\n  //on button submit action, this function is called\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    //call props function, pass in current name state triggering it in the parent, wipe the state to empty to conclude\r\n    props.addTask(name);\r\n    setName(\"\");\r\n  } \r\n\r\n    //render form, has functions to trigger on form submission as well as any change via event listener in the input field\r\n    return (\r\n      <form onSubmit={handleSubmit}>\r\n        <h2 className=\"label-wrapper\">\r\n          <label htmlFor=\"new-todo-input\" className=\"label__lg\">\r\n            What needs to be done?\r\n          </label>\r\n        </h2>\r\n        <input\r\n          type=\"text\"\r\n          id=\"new-todo-input\"\r\n          className=\"input input__lg\"\r\n          name=\"text\"\r\n          autoComplete=\"off\"\r\n          value={name}\r\n          onChange={handleChange}\r\n        />\r\n        <button type=\"submit\" className=\"btn btn__primary btn__lg\">\r\n          Add\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n  \r\n  export default Form;\r\n  ","import React from \"react\";\r\n\r\n//render the filter buttons\r\n//props passed in include active filter button, setFilter function, button name\r\n//active filter button dictates which should be Focused\r\n//upon click event props function triggers to enable update of filter state in parent\r\nfunction FilterButton(props) {\r\n  return (\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn toggle-btn\"\r\n      aria-pressed={props.isPressed}\r\n      onClick={() => props.setFilter(props.name)}\r\n    >\r\n      <span className=\"visually-hidden\">Show </span>\r\n      <span>{props.name}</span>\r\n      <span className=\"visually-hidden\"> tasks</span>\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default FilterButton;\r\n","import React, { useState } from \"react\"; \nimport { nanoid } from \"nanoid\";\n\nimport './App.css'; \n\n//call in the components\nimport Todo from \"./components/Todo\"; \nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\"; \n\n//object for the filter buttons, each key corresponds to button text and has a function associated to use in filter methods\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\n\nfunction App(props) {\n  //set hooks, corresponding to the tasklist and what filter button is active, tasklist comes from props passed in from index, is an array of objects \n  const [tasks, setTasks] = useState(props.tasks);\n  const [filter, setFilter] = useState('All');\n\n  //add task function to pass in as prop to Form Component, once callback happens is creates a new task using its parameters and hook is called to adjust tasklist state\n  function addTask(name) {\n    //in case of empty string tasks, return without changing a thing\n    if(name===\"\"){return}\n    const newTask = { id: \"todo-\" + nanoid(), name: name, completed: false };\n    setTasks([...tasks, newTask]);\n  } \n\n  //add delete function to pass as prop to Todo component, once callback happens it takes id from parameter and filters just that task out of tasklist then state is adjusted\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  //add toggle (of check) function to pass as prop to Todo component, upon callback it uses map to flip the boolean of the parameter id \n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  } \n\n  //add edit function to pass as prop to Todo component, on callback it receives a name in parameter which is to replace the old name for the id associated which is also a parameter\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n    // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  //call map on props passed in to map the props object into an array of components to add into the return statement\n  //also filters by using the state of filter, by default it is 'all' therefore filtering out nothing\n  const taskList = tasks.filter(FILTER_MAP[filter])\n.map(task => (\n  <Todo\n    id={task.id}\n    name={task.name}\n    completed={task.completed}\n    key={task.id}\n    toggleTaskCompleted={toggleTaskCompleted}\n    deleteTask={deleteTask}\n    editTask={editTask}\n  />\n));\n\n  //map filternames into a component to render, passing in setfilter as props to initiate a state adjust callback when needed\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n  \n  //render the app body, array of objects for filterList and taskList defined above\n  return (\n    <div className=\"todoapp stack-large\">\n      <Form addTask={addTask}/>\n      <div className=\"filters btn-group stack-exception\">\n        {/* render array of filter buttons here */}\n        {filterList}\n      </div>\n      <h2 id=\"list-heading\">{taskList.length} tasks remaining</h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {/* render the array of todo components here */}\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n//intial set of tasks to display setting the base\nconst DATA = [\n  { id: \"todo-0\", name: \"Eat\", completed: true },\n  { id: \"todo-1\", name: \"Sleep\", completed: false },\n  { id: \"todo-2\", name: \"Repeat\", completed: false }\n]; \n\n//pass in initial tasks as prop into the main app to call render\nReactDOM.render(\n  <App tasks={DATA} />, document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}